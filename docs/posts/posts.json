[
  {
    "path": "posts/2022-11-10-dual-wield/",
    "title": "Should you dual wield y axes?",
    "description": "",
    "author": [],
    "date": "2022-11-10",
    "categories": [],
    "contents": "\r\nConsider this: all charts are essentially squiggles on a Cartesian plane. There’s a horizontal, or x, axis and there’s a vertical, or y, axis. This implies that the underlying dataset ever only needs two columns, corresponding to the two axes. Many chart enthusiasts seem to be guided by this principle, which is why they detest charts that violate this setup, like pie charts.\r\nAnother example are charts with two different y axes, or what Excel calls a secondary axis. These charts are very popular. Today, Planning Secretary Arsenio Balisacan accompanied his tweet on the Philippine third quarter GDP numbers with this chart:\r\n\r\n\r\n\r\n\r\n\r\n\r\nIf that makes you cringe but are not sure why (or you think it’s fine but you’re wondering why it makes some people cringe), let me take a stab at an explanation.\r\nThe first problem is that there isn’t really a reason why it has to be a dual axis chart at all. The level of real GDP is not meaningful to most people and visualizing it doesn’t provide much insight.\r\nThe second problem is that it’s sloppily made. In the legend, “Real GDP” (the bars) is on the left and “GDP growth” (the line) is on the right, so the natural inclination is to use the left axis for the bars and the right axis for the line. But woe to you if you do—the positions are reversed. This is because for “combo charts” in Excel (i.e. where you combine two chart types), bar layers always go first before lines, hence they are listed first in the legend.1 But you can choose which axis the bar series is assigned to, so it should have been assigned to the left one.\r\nMore importantly: the two axes clash. Look at 5.0 on the left axis. If you follow the grid line all the way to the right axis, you get… nothing? It just misses 4.0, so the grid line marks 4.something I guess. In short, the grid lines really just mark the axis labels on the left, not the right. That’s confusing! This is again a trait of Excel. If you tick the check box that puts a series on the secondary axis, it automatically scales its axis independent of the primary axis. So you basically end up with two charts sharing the same x axis superimposed on top of each other.\r\nBelow is my own quick fix of the chart (data source here.\r\n\r\n\r\nShow code\r\n\r\nlibrary(tidyverse)\r\nlibrary(tsibble)\r\nlibrary(ggplot2)\r\n\r\ndf <- read_csv(\"phgdp.csv\") %>%\r\n  mutate(date = as.Date(date, format = \"%d/%m/%Y\"), \r\n         quarter = yearquarter(date),\r\n         qtr = as.character(quarter),\r\n         growth = 100 * (gdp / lag(gdp, 4) - 1))\r\n\r\nggplot(subset(df, date >= \"2019-03-01\")) + \r\n  geom_bar(aes(x = qtr, y = gdp / 1000000, fill = \"LHS - Real GDP (in constant 2018 trillion pesos)\"), stat = \"identity\", width = .6) + \r\n  geom_line(aes(x = qtr, y = growth / 5 + 4, color = \"RHS - GDP growth (in %)\"), group = 1, size = 1.5) + \r\n  geom_point(aes(x = qtr, y = growth / 5 + 4, color = \"RHS - GDP growth (in %)\"), size = 3) + \r\n  geom_hline(yintercept = 0, size = .25, color = \"gray25\") + \r\n  scale_fill_manual(values = \"#fcc954\") +\r\n  scale_color_manual(values = \"#0b3f90\") + \r\n  guides(fill = guide_legend(order = 1)) + \r\n  scale_y_continuous(limits = c(0, 7), breaks = 0:7,\r\n                     sec.axis = sec_axis(~ (. - 4) * 5, breaks = seq(-20, 15, 5))) + \r\n  theme(axis.title = element_blank(),\r\n        axis.text.x = element_text(size = 10, angle = 90, margin = margin(-3, 0, 0, 0)),\r\n        axis.text.y = element_text(size = 10, margin = margin(0, 5, 0, 0)),\r\n        axis.ticks = element_blank(),\r\n        legend.position = \"top\",\r\n        legend.title = element_blank(),\r\n        legend.key = element_blank(),\r\n        legend.key.height = unit(.75, \"lines\"),\r\n        legend.key.width = unit(1.5, \"lines\"),\r\n        legend.text = element_text(size = 11),\r\n        panel.background = element_blank(),\r\n        panel.grid.major.x = element_blank(),\r\n        panel.grid.major.y = element_line(size = .25, color = \"gray85\"),\r\n        panel.grid.minor.x = element_blank(),\r\n        panel.grid.minor.y = element_blank())\r\n\r\n\r\n\r\nI personally don’t have anything against dual axis charts, and I have used them a lot in my work. What I am against are sloppily made charts, and perhaps, by being inherently more complex, sloppiness in dual axis charts tends to be extra noticeable.\r\n\r\nFor some reason, Excel is adamant that you should never be able to change the order of chart layers, or the order of legend items.↩︎\r\n",
    "preview": "posts/2022-11-10-dual-wield/dual-wield_files/figure-html5/unnamed-chunk-3-1.png",
    "last_modified": "2022-11-12T21:49:49+08:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/2022-11-08-metro-manila-subway/",
    "title": "Mapping the Metro Manila Subway",
    "description": "",
    "author": [],
    "date": "2022-11-08",
    "categories": [],
    "contents": "\r\nToday I’ll experiment with making maps via leaflet, which I’m using for the first time. I’m relying mainly on this tutorial.\r\n\r\n\r\nlibrary(tidyverse)\r\nlibrary(leaflet)\r\n\r\n\r\nBelow is a map pointing out some of the planned stations of the future Metro Manila Subway, from Quirino Highway to 11th Avenue in BGC. I got the locations from trawling through news articles and project documents, then I used Google Maps to get their coordinates.\r\n\r\n\r\nleaflet(options = leafletOptions(minZoom = 10, maxZoom = 15)) %>%\r\n  addTiles() %>%\r\n  addMarkers(lng=121.028460, lat=14.689541, label=\"Quirino Highway Station\") %>%\r\n  addMarkers(lng=121.032355, lat=14.676936, label=\"Tandang Sora Station\") %>%\r\n  addMarkers(lng=121.035685, lat=14.654850, label=\"North Avenue Station\") %>%\r\n  addMarkers(lng=121.037591, lat=14.644747, label=\"Quezon Avenue Station\") %>%\r\n  addMarkers(lng=121.051628, lat=14.640692, label=\"East Avenue Station\") %>%\r\n  addMarkers(lng=121.065282, lat=14.627151, label=\"Anonas Station\") %>%\r\n  addMarkers(lng=121.069868, lat=14.613690, label=\"Camp Aguinaldo Station\") %>%\r\n  addMarkers(lng=121.063565, lat=14.588103, label=\"Ortigas Station\") %>%\r\n  addMarkers(lng=121.061238, lat=14.575162, label=\"Shaw Station\") %>%\r\n  addMarkers(lng=121.055859, lat=14.558327, label=\"11th Avenue Station\")\r\n\r\n\r\n\r\nAnd here’s the map! It’s fine? It’s a little busy, so let’s change the map tile from the default OpenStreetMap to a nice minimalist one from this list.\r\n\r\n\r\nleaflet(options = leafletOptions(minZoom = 10, maxZoom = 15)) %>%\r\n  addProviderTiles(providers$CartoDB.Voyager) %>%\r\n  addMarkers(lng=121.028460, lat=14.689541, label=\"Quirino Highway Station\") %>%\r\n  addMarkers(lng=121.032355, lat=14.676936, label=\"Tandang Sora Station\") %>%\r\n  addMarkers(lng=121.035685, lat=14.654850, label=\"North Avenue Station\") %>%\r\n  addMarkers(lng=121.037591, lat=14.644747, label=\"Quezon Avenue Station\") %>%\r\n  addMarkers(lng=121.051628, lat=14.640692, label=\"East Avenue Station\") %>%\r\n  addMarkers(lng=121.065282, lat=14.627151, label=\"Anonas Station\") %>%\r\n  addMarkers(lng=121.069868, lat=14.613690, label=\"Camp Aguinaldo Station\") %>%\r\n  addMarkers(lng=121.063565, lat=14.588103, label=\"Ortigas Station\") %>%\r\n  addMarkers(lng=121.061238, lat=14.575162, label=\"Shaw Station\") %>%\r\n  addMarkers(lng=121.055859, lat=14.558327, label=\"11th Avenue Station\")\r\n\r\n\r\n\r\nNeat. I’ll revisit this later on to see what else I can add.\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2022-11-10T21:57:01+08:00",
    "input_file": {}
  },
  {
    "path": "posts/2022-11-05-wdi/",
    "title": "Exercises in plotting WDI data",
    "description": "",
    "author": [],
    "date": "2022-11-05",
    "categories": [],
    "contents": "\r\nIn the old days I used to download WDI datasets in Excel format and point-and-click my way to a neat little chart. Now I want to try using the WDI package and some ggplot wizardry.\r\n\r\n\r\nlibrary(tidyverse)\r\nlibrary(ggplot2)\r\nlibrary(WDI)\r\n\r\n\r\nA simple line chart\r\nTo start, let’s try plotting the GDP per capita of the Philippines and Vietnam in constant 2015 US$.\r\n\r\n\r\ndf <- WDI(country = c(\"PH\",\"VN\"),\r\n          indicator = \"NY.GDP.PCAP.KD\",\r\n          start = 1990) %>% \r\n  as_tibble()\r\n\r\nggplot(df, aes(x = year, y = NY.GDP.PCAP.KD, color = country)) +\r\n  geom_line()\r\n\r\n\r\n\r\nGreat. Now let’s try to get a cleaner chart by removing everything we don’t need: the axis labels, the legend title, the vertical grid lines, the tick marks. Let’s also add a chart title.\r\n\r\n\r\nggplot(df, aes(x = year, y = NY.GDP.PCAP.KD, color = country)) +\r\n  geom_line() +\r\n  labs(title = \"GDP per capita in constant 2015 US$\") +\r\n  theme(axis.title = element_blank(),\r\n        axis.ticks = element_blank(),\r\n        legend.position = \"right\",\r\n        legend.title = element_blank(),\r\n        panel.grid.major.x = element_blank(),\r\n        panel.grid.minor.x = element_blank(),\r\n        panel.grid.minor.y = element_blank())\r\n\r\n\r\n\r\nIt’s a serviceable chart, but not a particularly attractive chart. Let’s spend some more time glamming it up. The numbers on the y-axis could use a thousands separator. The plot lines could be a little thicker. We can also make tweaks to the text sizes, the colors, the margins, and so forth.\r\n\r\n\r\nShow code\r\n\r\nggplot(df, aes(x = year, y = NY.GDP.PCAP.KD, color = country)) +\r\n  geom_line(size = 1) +\r\n  labs(title = \"GDP per capita in constant 2015 US$\") +\r\n  scale_color_manual(values = c(\"#076fe4\", \"#f2500d\")) + \r\n  scale_y_continuous(label = function(x) prettyNum(x, big.mark = \",\", scientific = FALSE)) + \r\n  theme(aspect.ratio = .7,\r\n        axis.title = element_blank(),\r\n        axis.ticks = element_blank(),\r\n        axis.text.x = element_text(size = 10, margin = margin(5, 0, 0, 0)),\r\n        axis.text.y = element_text(size = 10, margin = margin(0, 5, 0, 0)),\r\n        plot.title = element_text(size = 12, hjust = .5, face = \"bold\", margin = margin(0, 0, 10, 0)),\r\n        legend.position = \"right\",\r\n        legend.title = element_blank(),\r\n        legend.text = element_text(size = 11),\r\n        panel.background = element_rect(fill = \"gray97\"),\r\n        panel.grid.major.x = element_blank(),\r\n        panel.grid.minor.x = element_blank(),\r\n        panel.grid.minor.y = element_blank())\r\n\r\n\r\n\r\nNow this to me is pleasing to the eye. A document populated with charts like this—as opposed to charts like the first two above—would be much more motivating to read.\r\nA labeled scatterplot\r\nI think one useful way to categorize countries is according to whether they are big and rich, big and poor, small and rich, or small and poor. We can visualize this in a scatterplot with population on one axis and GDP per capita on the other. Let’s load up the data and plot the scatter.\r\n\r\n\r\ndf <- WDI(country = \"all\",\r\n          indicator = c(\"gpc\" = \"NY.GDP.PCAP.KD\", \r\n                        \"pop\" = \"SP.POP.TOTL\"),\r\n          start = 2015,\r\n          end = 2015,\r\n          extra = TRUE) %>% \r\n  as_tibble() %>%\r\n  filter(region != \"Aggregates\") %>%\r\n  select(country, gpc, pop) %>%\r\n  drop_na()\r\n\r\nggplot(df, aes(x = pop, y = gpc)) +\r\n  geom_point()\r\n\r\n\r\n\r\nWhat an atrocious chart! To make it comprehensible, we’ll need to re-express the axes in log scale first.\r\n\r\n\r\nggplot(df, aes(x = log10(pop), y = log2(gpc))) +\r\n  geom_point() + \r\n  scale_x_continuous(name = \"Population\",\r\n                     breaks = c(log10(10^4), log10(10^5), log10(10^6), log10(10^7), log10(10^8), log10(10^9)),\r\n                     label = c(\"10,000\", \"100,000\", \"1 million\", \"10 million\", \"100 million\", \"1 billion\")) +\r\n  scale_y_continuous(name = \"GDP per capita constant 2015 US$\",\r\n                     breaks = c(log2(500), log2(1500), log2(10000), log2(30000)),\r\n                     label = function(x) prettyNum(2^x, big.mark = \",\", scientific = FALSE))\r\n\r\n\r\n\r\nBetter! Let’s make further tweaks to the colors and so on to make it more attractive. In addition, let’s include some dividing lines to group big, small, rich, and poor countries. Some sensible definitions would be that “big” countries are those with 100 million people and above while “rich” countries are those with GDP per capita of $30,000 and above.\r\n\r\n\r\nShow code\r\n\r\nggplot(df, aes(x = log10(pop), y = log2(gpc))) +\r\n  geom_point(shape = 16, size = 3, color = \"#076fe4\") + \r\n  labs(title = \"Big and small, rich and poor\") +\r\n  geom_vline(xintercept = log10(10^8), size = .5, linetype = \"dashed\", color = \"gray50\") +\r\n  geom_hline(yintercept = log2(30000), size = .5, linetype = \"dashed\", color = \"gray50\") + \r\n  scale_x_continuous(name = \"Population\",\r\n                     breaks = c(log10(10^4), log10(10^5), log10(10^6), log10(10^7), log10(10^8), log10(10^9)),\r\n                     label = c(\"10,000\", \"100,000\", \"1 million\", \"10 million\", \"100 million\", \"1 billion\")) +\r\n  scale_y_continuous(name = \"GDP per capita constant 2015 US$\",\r\n                     breaks = c(log2(500), log2(1500), log2(10000), log2(30000)),\r\n                     label = function(x) prettyNum(2^x, big.mark = \",\", scientific = FALSE)) + \r\n  theme(axis.title = element_text(size = 11),\r\n        axis.title.x = element_text(margin = margin(10, 0, 0, 0)),\r\n        axis.title.y = element_text(margin = margin(0, 10, 0, 0)),\r\n        axis.text.x = element_text(size = 10, margin = margin(5, 0, 0, 0)),\r\n        axis.text.y = element_text(size = 10, margin = margin(0, 5, 0, 0)),\r\n        axis.ticks = element_blank(),\r\n        plot.title = element_text(size = 12, hjust = .5, face = \"bold\", margin = margin(0, 0, 10, 0)),\r\n        panel.background = element_rect(fill = \"gray97\"),\r\n        panel.grid = element_blank())\r\n\r\n\r\n\r\nAnd here’s the interesting result. Under this set of definitions, there are really only two big and rich countries: the United States and Japan. The biggest small and rich country is Germany, with a population of 82 million, while the richest small and poor country is Mexico, with a GDP per capita of $9,600. In short, no country in the near future is expected to join the big-and-rich club.1\r\nNow let’s make some finishing touches to the chart. First, let’s add the labels “big”, “small”, “rich”, and “poor” on either side of the dashed lines to make it clear what they’re indicating. Second, let’s bold the axis labels “30,000” and “100 million” to highlight the chosen thresholds for bigness and richness. Third, let’s label the points for the U.S., Japan, Germany, and Mexico to facilitate the discussion accompanying the chart. We also highlight these four points by making all other points transparent.\r\n\r\n\r\nShow code\r\n\r\nggplot(df, aes(x = log10(pop), y = log2(gpc))) +\r\n  geom_point(shape = 16, size = 3, color = \"#076fe4\", alpha = ifelse(df$country %in% c(\"United States\", \"Japan\", \"Germany\", \"Mexico\"), 1, .25)) +\r\n  labs(title = \"Big and small, rich and poor\") +\r\n  \r\n  # Dashed lines\r\n  geom_vline(xintercept = log10(10^8), size = .5, linetype = \"dashed\", color = \"gray50\") +\r\n  geom_hline(yintercept = log2(30000), size = .5, linetype = \"dashed\", color = \"gray50\") + \r\n  annotate(\"text\", x = log10(10^8) + .05, y = log2(200000), hjust = 0, label = \"big\", size = 3.5, color = \"gray50\") +\r\n  annotate(\"text\", x = log10(10^8) - .05, y = log2(200000), hjust = 1, label = \"small\", size = 3.5, color = \"gray50\") +\r\n  annotate(\"text\", x = log10(10.5^9), y = log2(30000) + .2, vjust = 0, label = \"rich\", size = 3.5, color = \"gray50\") +\r\n  annotate(\"text\", x = log10(10.5^9), y = log2(30000) - .15, vjust = 1, label = \"poor\", size = 3.5, color = \"gray50\") +\r\n  \r\n  # Highlighted points\r\n  annotate(\"text\", x = log10(df$pop[df$country == \"United States\"]), y = log2(df$gpc[df$country == \"United States\"]) + .4, hjust = 0, vjust = 0, label = \"United States\", size = 3.5, fontface = \"bold\") + \r\n  annotate(\"text\", x = log10(df$pop[df$country == \"Japan\"]) + .1, y = log2(df$gpc[df$country == \"Japan\"]), hjust = 0, vjust = 0, label = \"Japan\", size = 3.5, fontface = \"bold\") + \r\n  annotate(\"text\", x = log10(df$pop[df$country == \"Germany\"]), y = log2(df$gpc[df$country == \"Germany\"]) + .4, hjust = .5, vjust = 0, label = \"Germany\", size = 3.5, fontface = \"bold\") + \r\n  annotate(\"text\", x = log10(df$pop[df$country == \"Mexico\"]), y = log2(df$gpc[df$country == \"Mexico\"]) + .4, hjust = .5, vjust = 0, label = \"Mexico\", size = 3.5, fontface = \"bold\") + \r\n  \r\n  scale_x_continuous(name = \"Population\",\r\n                     breaks = c(log10(10^4), log10(10^5), log10(10^6), log10(10^7), log10(10^8), log10(10^9)),\r\n                     label = c(\"10,000\", \"100,000\", \"1 million\", \"10 million\", \"100 million\", \"1 billion\")) +\r\n  scale_y_continuous(name = \"GDP per capita constant 2015 US$\",\r\n                     breaks = c(log2(500), log2(1500), log2(10000), log2(30000)),\r\n                     label = function(x) prettyNum(2^x, big.mark = \",\", scientific = FALSE)) + \r\n  theme(axis.title = element_text(size = 11),\r\n        axis.title.x = element_text(margin = margin(10, 0, 0, 0)),\r\n        axis.title.y = element_text(margin = margin(0, 10, 0, 0)),\r\n        axis.text.x = element_text(size = 10, margin = margin(5, 0, 0, 0), face = c(\"plain\", \"plain\", \"plain\", \"plain\", \"bold\", \"plain\")),\r\n        axis.text.y = element_text(size = 10, margin = margin(0, 5, 0, 0), face = c(\"plain\", \"plain\", \"plain\", \"bold\")),\r\n        axis.ticks = element_blank(),\r\n        plot.title = element_text(size = 12, hjust = .5, face = \"bold\", margin = margin(0, 0, 10, 0)),\r\n        panel.background = element_rect(fill = \"gray97\"),\r\n        panel.grid = element_blank())\r\n\r\n\r\n\r\nAnd here’s the final chart!\r\n\r\nNot that this should be taken too seriously! The thresholds I used are completely arbitrary.↩︎\r\n",
    "preview": "posts/2022-11-05-wdi/wdi_files/figure-html5/unnamed-chunk-8-1.png",
    "last_modified": "2022-11-07T23:14:29+08:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  }
]
